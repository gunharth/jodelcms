{"version":3,"sources":["editor.js","elements.js","form.js","map.js","social.js","spacer.js","text.js"],"names":[],"mappingshlhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"editor.js","sourcesContent":["(function (exports) {\n'use strict';\n\nvar Editor = function Editor() {\n    this.editorPanel = $('#editor-panel');\n    this.editorPanelCollapse = $('#modal-toggle');\n    this.page_id = 0;\n    this.editorFrame = $(\"#editorIFrame\");\n    this.data = '';\n    this.collection;\n    this.collection_id = 0;\n    this.editorLocale = 'en';\n    this.editorPinned = true;\n    //this.elementsList = [\"text\",\"image\",\"gallery\",\"video\",\"file\",\"form\",\"map\",\"share\",\"spacer\",\"code\"];\n    this.elementsList = ['text', 'spacer', 'form', 'map', 'social'];\n    this.elementHandlers = {};\n    this.elementOptions = {};\n    this.isGoogleMapsApiLoaded = false;\n    this.elementsToDelete = [];\n    this.hasUnsavedChanges = false;\n};\n\nEditor.prototype.setChanges = function setChanges () {\n    this.hasUnsavedChanges = true;\n    $('#saveMe').show();\n    //$('.btn-save', this.panel).addClass('glow').find('i').removeClass('fa-check').addClass('fa-exclamation-circle');\n};\n\nEditor.prototype.hasChanges = function hasChanges () {\n    return this.hasUnsavedChanges;\n};\n\nEditor.prototype.noChanges = function noChanges () {\n    this.hasUnsavedChanges = false;\n    $('#saveMe').hide();\n    //$('.btn-save', this.panel).removeClass('glow').find('i').removeClass('fa-exclamation-circle').addClass('fa-check');\n};\n\nEditor.prototype.showLoadingIndicator = function showLoadingIndicator () {\n    $('#editor-loading').show();\n};\n\nEditor.prototype.hideLoadingIndicator = function hideLoadingIndicator () {\n    $('#editor-loading').fadeOut();\n};\n\nEditor.prototype.injectScript = function injectScript (url, callback) {\n\n    var doc = this.editorFrame.get(0).contentWindow.document;\n    var head = doc.getElementsByTagName('body')[0];\n    var script = doc.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n    script.onreadystatechange = callback;\n    script.onload = callback;\n    head.appendChild(script);\n\n};\n\nEditor.prototype.initPanel = function initPanel () {\n        var this$1 = this;\n\n        \n    $.ajaxSetup({\n        headers: {\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        }\n    });\n\n    this.editorFrame.on('load', function () {\n        $('a[target!=_blank]', this$1.editorFrame.contents()).attr('target', '_top');\n        this$1.initRegions();\n        // alert(JSON.stringify(this.editorFrame.get(0).contentWindow.eoptions));\n\n    });\n        \n    //Save Keyboard shortcut if editor is in focus\n    $(document).keydown(function (e) {\n        if ((e.ctrlKey || e.metaKey) && e.which == 83) {\n            e.preventDefault();\n            this$1.editorFrame.get(0).contentWindow.saveContent();\n            //this.hasUnsavedChanges = false;\n        }\n    });\n\n    this.editorPanel.draggable({\n        handle: \".modal-header\",\n        iframeFix: true,\n        cursor: \"move\",\n        containment: \"document\",\n        stop: function () {\n            this$1.savePanelState();\n            this$1.editorPanel.css({ height: 'auto' });\n        }\n    });\n\n    this.buildElementsList();\n\n\n    /**\n     * Boostrap tooltips\n     */\n    // $('[data-toggle=\"tooltip\"]').tooltip({\n    // animation: false\n    // }); \n\n    $(window).resize(function () {\n        var windowWidth = $(window).width();\n        var windowHeight = $(window).height();\n        var left = $(\"#editor-panel\").position().left;\n        var width = $(\"#editor-panel\").width();\n        var top = $(\"#editor-panel\").position().top;\n        var height = $(\"#editor-panel\").height();\n        if (windowWidth < left + width) {\n            var newLeft = left - ((left + width) - windowWidth);\n            if (newLeft < 0) { newLeft = 0; }\n            $(\"#editor-panel\").css({ left: newLeft });\n        }\n        if (windowHeight < top + height) {\n            var newTop = top - ((top + height) - windowHeight);\n            if (newTop < 0) { newTop = 0; }\n            $(\"#editor-panel\").css({ top: newTop });\n        }\n        if(this$1.editorPinned) {\n            this$1.editorFrame.width($(document).width()-340);\n        }\n        this$1.savePanelState();\n    });\n\n    window.onbeforeunload = function () {\n        if (!this$1.hasChanges()){ return; }\n        return 'pageOutConfirm';\n    };\n\n    $('#saveMe').on('click', function (e) {\n        e.preventDefault();\n        this$1.editorFrame.get(0).contentWindow.saveContent();\n    });\n\n    $('.modal-header select', this.editorPanel).on('change', function (e) {\n        e.preventDefault();\n        this$1.editorLocale = $(e.target).val();\n        this$1.loadPages();\n        this$1.loadMenu(this$1.getMenuID());\n    });\n\n    $('.modal-header .tb-collapse', this.editorPanel).on('click', function (e) {\n        e.preventDefault();\n        this$1.editorPanelCollapse.slideToggle(250, function () {\n            this$1.savePanelState();\n        });\n        $('.modal-header .tb-collapse i').toggleClass('fa-caret-up').toggleClass('fa-caret-down');\n    });\n\n    $('.modal-header .tb-toggle', this.editorPanel).on('click', function (e) {\n        e.preventDefault();\n        this$1.editorPanel.toggleClass('pinned');\n        this$1.editorFrame.toggleClass('pinned');\n        //this.editorPanelCollapse.slideToggle(250, () => {\n            this$1.savePanelState();\n            this$1.restorePanelState();\n        //});\n        $('.modal-header .tb-toggle i').toggleClass('fa-lock').toggleClass('fa-unlock');\n    });\n\n    $('.modal-header .tb-collapse-right', this.editorPanel).on('click', function (e) {\n        e.preventDefault();\n        // this.editorPanelCollapse.slideToggle(250, () => {\n        // this.savePanelState();\n        // });\n        this$1.editorPanel;\n        // Set the effect type\n        var effect = 'slide';\n\n        // Set the options for the effect type chosen\n        var options = { direction: 'right' };\n\n        // Set the duration (default: 400 milliseconds)\n        var duration = 500;\n\n        this$1.editorPanel.toggle(effect, options, duration);\n        this$1.editorFrame.animate({\n        width: \"100%\"\n      }, duration);\n        $('.modal-header .tb-collapse i').toggleClass('fa-caret-right').toggleClass('fa-caret-left');\n    });\n\n    $('.modal-header .tb-refresh', this.editorPanel).on('click', function (e) {\n        e.preventDefault();\n        this$1.editorFrame.get(0).contentWindow.location.reload(true);\n    });\n\n    $(\"#tabs\").tabs({\n        activate: function (event, ui) {\n            this$1.savePanelState();\n        },\n        create: function (event, ui) {\n            this$1.restorePanelState();\n        }\n    });\n\n    $(\".tabs\").tabs({});\n\n\n    /**\n     *  Open new page dialog\n     */\n    $('#tab-pages', this.editorPanel).on('click', '.btn-create', function (e) {\n        e.preventDefault();\n        this$1.addPage();\n    });\n\n    /**\n     *  Load page in window\n     */\n    $('#tab-pages', this.editorPanel).on('click', '.load', function (e) {\n        e.preventDefault();\n        var src = $(e.target).data('url');\n        window.top.location.href = src;\n    });\n\n    /**\n     *  Open edit page dialog\n     */\n    $('#tab-pages', this.editorPanel).on('click', '.settings', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        this$1.page_id = parent.data('id');\n        this$1.editPage();\n    });\n\n    /**\n     *  Duplicate a page\n     */\n    $('#tab-pages', this.editorPanel).on('click', '.duplicate', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        var page_id = parent.data('id');\n        this$1.showLoadingIndicator();\n        $.ajax({\n            type: 'POST',\n            url: '/admin/page/duplicate',\n            data: 'id=' + page_id,\n            error: function (xhr, ajaxOptions, thrownError) {\n                console.log(xhr.status);\n                console.log(thrownError);\n            }\n        }).done(function (data) {\n            this$1.data = data;\n            this$1.loadPageURL();\n        });\n    });\n\n    /**\n     *  Delete a page\n     */\n    $('#tab-pages', this.editorPanel).on('click', '.delete', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        var page_id = parent.data('id');\n\n        var message = 'Are you sure you want to delete page?';\n\n        this$1.showConfirmationDialog(message, function () {\n            this$1.showLoadingIndicator();\n            $.ajax({\n                type: 'POST',\n                url: '/admin/page/' + page_id,\n                data: {\n                    '_method': 'delete'\n                },\n                dataType: 'json',\n                error: function (xhr, ajaxOptions, thrownError) {\n                    console.log(xhr.status);\n                    console.log(thrownError);\n                }\n            }).done(function () {\n                parent.slideUp(function () {\n                    parent.remove();\n                    this$1.hideLoadingIndicator();\n                });\n            });\n        });\n    });\n\n    /**\n    /* Menu funtions\n    */\n    $('.nestable').nestable({\n        maxDepth: 2\n    }).on('change', function () {\n        this$1.showLoadingIndicator();\n        $.ajax({\n            type: 'POST',\n            url: '/admin/menu/sortorder',\n            data: JSON.stringify($('.nestable').nestable('asNestedSet')),\n            contentType: \"json\",\n            /*headers: {\n                'X-CSRF-Token': $('meta[name=\"_token\"]').attr('content')\n            },*/\n            error: function (xhr, ajaxOptions, thrownError) {\n                console.log(xhr.status);\n                console.log(thrownError);\n            }\n        }).done(function () {\n            this$1.hideLoadingIndicator();\n        });\n    });\n\n\n    /**\n     *  Open new menu dialog\n     */\n    $('#tab-menus', this.editorPanel).on('click', '.btn-create', function (e) {\n        e.preventDefault();\n        //let menu_type_id = $('#menuSelector').find('option:selected').val();\n        this$1.addMenu(this$1.getMenuID());\n    });\n\n    /**\n     *  Load menu in window\n     */\n    $('#tab-menus', this.editorPanel).on('click', '.load', function (e) {\n        e.preventDefault();\n        var src = $(e.target).data('url');\n        var target = $(e.target).data('target');\n        if (target == '') {\n            window.top.location.href = src;\n        } else {\n            window.open(src);\n        }\n    });\n\n\n    /**\n     *  Open edit menu dialog\n     */\n    $('#tab-menus', this.editorPanel).on('click', '.edit', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        this$1.menu_type_id = parent.data('id');\n        this$1.editMenu();\n    });\n\n\n    /**\n     *  Toggle menu active state\n     */\n    $('#tab-menus', this.editorPanel).on('click', '.toggleActive', function (e) {\n        e.preventDefault();\n        this$1.showLoadingIndicator();\n        var menu_type_id = $(e.target).parents('.dd-item').data('id');\n        var active = $(e.target).data('active');\n        $.ajax({\n            type: 'POST',\n            url: '/admin/menu/active',\n            data: 'id=' + menu_type_id + '&active=' + active,\n            error: function (xhr, ajaxOptions, thrownError) {\n                console.log(xhr.status);\n                console.log(thrownError);\n            }\n        }).done(function () {\n            $(e.target).toggleClass(\"fa-circle-o\").toggleClass(\"fa-circle\");\n            this$1.hideLoadingIndicator();\n        });\n    });\n\n\n    /**\n     *  Delete a menu\n     */\n    $('#tab-menus', this.editorPanel).on('click', '.delete', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        var menu_type_id = parent.data('id');\n\n        var message = 'Are you sure you want to delete menu item?';\n\n        this$1.showConfirmationDialog(message, function () {\n            this$1.showLoadingIndicator();\n            $.ajax({\n                type: 'POST',\n                url: '/admin/menu/' + menu_type_id,\n                data: {\n                    '_method': 'delete'\n                },\n                dataType: 'json',\n                error: function (xhr, ajaxOptions, thrownError) {\n                    console.log(xhr.status);\n                    console.log(thrownError);\n                }\n            }).done(function () {\n                parent.slideUp(function () {\n                    parent.remove();\n                    this$1.hideLoadingIndicator();\n                });\n            });\n        });\n    });\n\n    /**\n     *  Select a menu\n     */\n    $('#menuSelector', this.editorPanel).on('change', function (e) {\n        //let menu_type_id = $('#menuSelector').find('option:selected').val();\n        this$1.loadMenu(this$1.getMenuID());\n    });\n\n    /**\n     *  Menu item type form select\n     */\n    $('body').on('change', '#menuTypeSelector', function (e) {\n        this$1.renderMenuTypeSelect();\n    });\n\n\n    /**\n     *  Open edit collection dialog\n     */\n    $('#tab-collections', this.editorPanel).on('click', '.openCollection', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        this$1.collection = parent.data('collection');\n        this$1.editCollection(this$1.collection);\n    });\n\n    /**\n     *  Tab collections tab1\n     *  Load collection in iframe\n     */\n\n    $('body').on('click', '#collection-tab1 .btn-create', function (e) {\n        e.preventDefault();\n        this$1.addCollectionItem();\n    });\n\n    /**\n     *  Tab collections tab1\n     *  Load collection in iframe\n     */\n    $('body').on('click', '#collectionItems .load', function (e) {\n        e.preventDefault();\n        var src = $(e.target).data('url');\n        //this.editorFrame = src;\n        // this.editorFrame.attr('src',src);\n        window.top.location.href = src;\n    });\n\n    $('body').on('click', '#collectionItems .edit', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        this$1.collection_id = parent.data('id');\n        this$1.editCollectionItem();\n    });\n\n    $('body').on('click', '#collectionItems .delete', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        this$1.collection_id = parent.data('id');\n\n        var message = 'Are you sure you want to delete this item?';\n\n        this$1.showConfirmationDialog(message, function () {\n            this$1.showLoadingIndicator();\n            $.ajax({\n                type: 'POST',\n                url: '/admin/blog/' + this$1.collection_id,\n                data: {\n                    '_method': 'delete'\n                },\n                dataType: 'json',\n                error: function (xhr, ajaxOptions, thrownError) {\n                    console.log(xhr.status);\n                    console.log(thrownError);\n                }\n            }).done(function () {\n                this$1.loadCollectionItems();\n                $('#collection-tab1-left').html('');\n                // parent.slideUp(() => {\n                // parent.remove();\n                // this.hideLoadingIndicator();\n                // });\n            });\n        });\n    });\n\n    $('body').on('click', 'button.submit', function (e) {\n        e.preventDefault();\n        var form = $(e.target).parents('form');\n        this$1.submitCollectionForm(form);\n    });\n\n    // collection pagination\n    $('body').on('click', '#collection-edit .pagination a', function (e) {\n        e.preventDefault();\n        this$1.showLoadingIndicator();\n        var href = $(e.target).attr('href');\n        $.ajax({\n            type: 'GET',\n            url: href,\n            error: function (xhr, ajaxOptions, thrownError) {\n                console.log(xhr.status);\n                console.log(thrownError);\n            }\n        }).done(function (html) {\n            $('#collectionItemsOuter').html(html);\n            this$1.hideLoadingIndicator();\n        });\n    });\n\n    /**\n     *  Open edit page dialog\n     */\n    $('#tab-settings', this.editorPanel).on('click', '.openSettings', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        this$1.setting = parent.data('setting');\n        this$1.editSetting(this$1.setting);\n    });\n\n    /**\n     *  Tab settings logs\n     *  Load collection in iframe\n     */\n    $('#tab-settings', this.editorPanel).on('click', '.openLogs', function (e) {\n        e.preventDefault();\n        var parent = $(e.target).parents('.dd-item');\n        this$1.setting = parent.data('setting');\n        //console.log(this.setting)\n        this$1.editSetting(this$1.setting);\n    });\n\n};\n\n\n/**\n *  Editor edit collection window\n */\nEditor.prototype.editCollection = function editCollection () {\n        var this$1 = this;\n\n    this.openDialog({\n        id: 'collection-edit',\n        title: 'Edit',\n        modal: true,\n        width: 800,\n        minHeight: 600,\n        url: '/admin/' + this.collection + '/collectionIndex',\n        type: 'ajax',\n        onAfterShow: function () {\n            this$1.loadCollectionItems();\n        },\n        // callback: () => {\n        // // //this.loadPages();\n        // // // alert('yo');\n        // //this.loadCollectionItems(collection);\n        // },\n        buttons: {\n            // ok: 'Save',\n            // Cancel: () => {\n            //     this.dialog.dialog(\"close\");\n            // }\n        }\n    });\n};\n\n/**\n *  Editor load all collection items\n */\nEditor.prototype.loadCollectionItems = function loadCollectionItems () {\n        var this$1 = this;\n\n    this.showLoadingIndicator();\n    $.ajax({\n        type: 'GET',\n        url: '/admin/' + this.collection + '/listCollectionItems',\n        //data: 'id='+menu_type_id,\n        error: function (xhr, ajaxOptions, thrownError) {\n            console.log(xhr.status);\n            console.log(thrownError);\n        }\n    }).done(function (html) {\n        $('#collectionItemsOuter').html(html);\n        this$1.hideLoadingIndicator();\n    });\n};\n\n/**\n *  Editor add collection item\n */\nEditor.prototype.addCollectionItem = function addCollectionItem () {\n        var this$1 = this;\n\n    this.showLoadingIndicator();\n    $.ajax({\n        type: 'GET',\n        url: '/' + this.editorLocale + '/admin/' + this.collection + '/create',\n        //data: 'id='+menu_type_id,\n        error: function (xhr, ajaxOptions, thrownError) {\n            console.log(xhr.status);\n            console.log(thrownError);\n        }\n    }).done(function (html) {\n        $('#collection-tab1-left').html(html);\n        $('#collection-tab1-left .tabs').tabs();\n        this$1.hideLoadingIndicator();\n    });\n};\n\n/**\n *  Editor edit collection window\n */\nEditor.prototype.editCollectionItem = function editCollectionItem () {\n        var this$1 = this;\n\n    this.showLoadingIndicator();\n    $.ajax({\n        type: 'GET',\n        url: '/' + this.editorLocale + '/admin/' + this.collection + '/' + this.collection_id + '/settings',\n        //data: 'id='+menu_type_id,\n        error: function (xhr, ajaxOptions, thrownError) {\n            console.log(xhr.status);\n            console.log(thrownError);\n        }\n    }).done(function (html) {\n        $('#collection-tab1-left').html(html);\n        $('#collection-tab1-left .tabs').tabs();\n        this$1.hideLoadingIndicator();\n    });\n};\n\nEditor.prototype.submitCollectionForm = function submitCollectionForm (form) {\n        var this$1 = this;\n\n    // if (options.type == 'ajax') {\n    this.showLoadingIndicator();\n    //let form = $('#collection-edit form:visible');\n    var formData = form.serialize();\n    var action = form.attr('action');\n    $.ajax({\n        type: 'POST', // define the type of HTTP verb we want to use (POST for our form)\n        url: action, // the url where we want to POST\n        data: formData, // our data object\n        dataType: 'json', // what type of data do we expect back from the server\n        encode: true,\n        error: function (data) {\n            this$1.hideLoadingIndicator();\n            $(\"input\").parent().removeClass('has-error');\n            $(\"input\").prev().find('span').remove();\n            var errors = data.responseJSON;\n            console.log(errors);\n            $.each(errors, function (key, value) {\n                $(\"input[name=\" + key + \"]\").parent().addClass('has-error');\n                $(\"input[name=\" + key + \"]\").prev().append(' <span class=\"has-error\">' + value + '</span>');\n            });\n        }\n    }).done(function (data) {\n        //this.hideLoadingIndicator();\n        //console.log(data)\n        if (data == true) {\n            this$1.hideLoadingIndicator();\n        } else {\n            this$1.collection_id = data.id;\n            this$1.loadCollectionItems(this$1.collection);\n            this$1.editCollectionItem();\n        }\n\n        //this.data = data;\n        //dialog.dialog('close');\n        //dialog.remove();\n        // if (typeof(options.callback) === 'function') {\n        // options.callback();\n        // }\n\n    });\n    // } else {\n    // form.submit()\n    // }\n};\n\n/**\n *  Editor edit page window\n */\nEditor.prototype.editSetting = function editSetting (setting) {\n    this.openDialog({\n        id: 'setting-edit',\n        title: 'Edit',\n        modal: false,\n        width: 800,\n        url: '/admin/' + setting,\n        type: 'ajax',\n        // callback: () => {\n        // this.loadPages();\n        // },\n        buttons: {\n            // ok: 'Save',\n            // Cancel: () => {\n            //     this.dialog.dialog(\"close\");\n            // }\n        }\n    });\n};\n\n/**\n * Menu Popup create edit\n * Render selection\n */\nEditor.prototype.renderMenuTypeSelect = function renderMenuTypeSelect () {\n    var dropdown = $('#menuTypeItemSelector');\n    if (dropdown.length) {\n        var external = $('#menuTypeExternalInput');\n        var selected = $('#menuTypeSelector').find('option:selected').val();\n        if (selected == 'External') {\n            dropdown.hide();\n            external.show();\n        } else {\n            dropdown.show();\n            external.hide();\n            $('#external_link').val('');\n            $.ajax({\n                type: 'GET',\n                url: '/admin/menuSelectorType/' + selected,\n                //data: 'id='+menu_type_id,\n                error: function (xhr, ajaxOptions, thrownError) {\n                    console.log(xhr.status);\n                    console.log(thrownError);\n                }\n            }).done(function (data) {\n                dropdown.empty();\n                //ele.append('<option value=\"0\">-- Auswahl --</option>');\n                var selected = 0;\n                if ($('#morpher_id_orig').length) {\n                    selected = $('#morpher_id_orig').text();\n                }\n                for (var i = 0; i < data.length; i++) {\n                    var sel = '';\n                    if (data[i].id == selected) {\n                        sel = ' selected=\"selected\"';\n                    }\n                    dropdown.append('<option value=\"' + data[i].id + '\"' + sel + '>' + data[i].title + '</option>');\n                }\n            });\n        }\n    }\n};\n\n/**\n *  Editor load all pages\n */\nEditor.prototype.loadPages = function loadPages () {\n        var this$1 = this;\n\n    this.showLoadingIndicator();\n    $.ajax({\n        type: 'GET',\n        url: '/admin/page/listPages/' + this.editorLocale,\n        //data: 'id='+menu_type_id,\n        error: function (xhr, ajaxOptions, thrownError) {\n            console.log(xhr.status);\n            console.log(thrownError);\n        }\n    }).done(function (html) {\n        $('#pageItems').html(html);\n        this$1.hideLoadingIndicator();\n    });\n};\n\n/**\n *  Editor edit page window\n */\nEditor.prototype.editPage = function editPage () {\n        var this$1 = this;\n\n    this.openDialog({\n        id: 'page-edit',\n        title: 'Edit',\n        modal: true,\n        url: '/' + this.editorLocale + '/admin/page/' + this.page_id + '/settings',\n        type: 'ajax',\n        callback: function () {\n            this$1.loadPages();\n        },\n        buttons: {\n            ok: 'Save',\n            Cancel: function () {\n                this$1.dialog.dialog(\"close\");\n            }\n        }\n    });\n};\n\n\n/**\n * Editor add page window\n */\nEditor.prototype.addPage = function addPage () {\n        var this$1 = this;\n\n    this.openDialog({\n        id: 'page-add',\n        title: 'Create a new Page',\n        modal: true,\n        url: '/admin/page/create',\n        type: 'ajax',\n        buttons: {\n            ok: 'Create',\n            Cancel: function () {\n                this$1.dialog.dialog(\"close\");\n            }\n        },\n        callback: function () {\n            this$1.loadPageURL();\n        },\n    });\n};\n\nEditor.prototype.loadPageURL = function loadPageURL () {\n    window.top.location.href = '/page/' + this.data.slug;\n};\n\n\n/**\n * save Editor State\n */\nEditor.prototype.savePanelState = function savePanelState () {\n    var activeLanguage = this.editorLocale;\n    var activeTab = $('#tabs').tabs(\"option\", \"active\");\n    var activeMenu = $('#menuSelector', this.editorPanel).val();\n    localStorage.setItem(\"editor-panel\", JSON.stringify({\n        pinned: this.editorPanel.hasClass('pinned'),\n        position: this.editorPanel.position(),\n        locale: activeLanguage,\n        tab: activeTab,\n        menu: activeMenu,\n        expanded: $('#modal-toggle:visible', this.editorPanel).length\n    }));\n};\n\n\n/**\n * restore Editor State\n */\nEditor.prototype.restorePanelState = function restorePanelState () {\n    this.editorPanel.fadeIn();\n    var panelState = {};\n    if (!localStorage.getItem(\"editor-panel\")) {\n        panelState = {\n            pinned: true,\n            position: { left: 50, top: 150 },\n            locale: this.editorLocale,\n            tab: 0,\n            menu: 1,\n            expanded: true\n        };\n    } else {\n        panelState = JSON.parse(localStorage.getItem(\"editor-panel\"));\n    }\n    if (!panelState.pinned) {\n        this.editorPinned = false;\n        this.editorFrame.animate({ \n            width: '100%'\n        }, 500);\n        this.editorPanel.css('right','auto').css(panelState.position).draggable( 'enable' );\n        if (!panelState.expanded) {\n            this.editorPanelCollapse.hide();\n            $('.modal-header .tb-collapse i').toggleClass('fa-caret-up').toggleClass('fa-caret-down');\n        }\n    } else {\n        // this.editorFrame.addClass('pinned');\n        this.editorPinned = true;\n        this.editorFrame.animate({ \n            width: $(document).width()-340 \n        }, 500);\n        // var left = this.editorPanel.position().left; // get left position\n        // var width = this.editorPanel.width(); // get width;\n        // var right = width + left;\n        this.editorPanel.addClass('pinned');\n        this.editorPanel.css('right', 0).css('left','auto').css('top', 0).draggable( 'disable' );\n                        // .animate({\n                        // right: 0,\n                        // top: 0\n                        // }, 500);\n                        //.css('right', 0).css('left','auto').css('top', 0);\n        if (!panelState.expanded) {\n            this.editorPanelCollapse.show();\n                \n        }\n    }\n    this.editorLocale = panelState.locale;\n    $(\"#editorLocales > [value=\" + panelState.locale + \"]\").attr(\"selected\", \"true\");\n    $('#tabs').tabs(\"option\", \"active\", panelState.tab);\n    $(\"#menuSelector > [value=\" + panelState.menu + \"]\").attr(\"selected\", \"true\");\n    this.loadPages();\n    this.loadMenu(panelState.menu);\n};\n\n\n/**\n *  Get active Menu id\n */\nEditor.prototype.getMenuID = function getMenuID () {\n    return $('#menuSelector').find('option:selected').val();\n};\n\n/**\n *  Editor load selected menu\n */\nEditor.prototype.loadMenu = function loadMenu (menu_type_id) {\n        var this$1 = this;\n\n    this.showLoadingIndicator();\n    $.ajax({\n        type: 'GET',\n        url: '/admin/menu/listMenus/' + menu_type_id + '/' + this.editorLocale,\n        //data: 'id='+menu_type_id,\n        error: function (xhr, ajaxOptions, thrownError) {\n            console.log(xhr.status);\n            console.log(thrownError);\n        }\n    }).done(function (html) {\n        $('#menuItems').html(html);\n        $('#menuItems').parent().nestable('init');\n        $('#menuItems').parent().nestable('collapseAll');\n        this$1.savePanelState();\n        this$1.hideLoadingIndicator();\n    });\n};\n\n\n/**\n *  Editor edit menu window\n */\nEditor.prototype.editMenu = function editMenu () {\n        var this$1 = this;\n\n\n    this.openDialog({\n        id: 'menu-edit',\n        title: 'Edit',\n        modal: true,\n        url: '/admin/menu/' + this.menu_type_id + '/settings' + '/' + this.editorLocale,\n        type: 'ajax',\n        onAfterShow: function () {\n            this$1.renderMenuTypeSelect();\n        },\n        callback: function () {\n            this$1.loadMenu(this$1.getMenuID());\n        },\n        cache: false,\n        buttons: {\n            ok: 'Save',\n            Cancel: function () {\n                this$1.dialog.dialog(\"close\");\n            }\n        }\n    });\n};\n\n\n/**\n *  Editor new menu window\n */\nEditor.prototype.addMenu = function addMenu (menu_type_id) {\n        var this$1 = this;\n\n\n    this.openDialog({\n        id: 'menu-add',\n        title: 'Create a new menu',\n        modal: true,\n        url: '/' + this.editorLocale + '/admin/menu/create/' + menu_type_id,\n        type: 'ajax',\n        onAfterShow: function () {\n            this$1.renderMenuTypeSelect();\n        },\n        callback: function () {\n            this$1.loadMenu(menu_type_id);\n        },\n        buttons: {\n            ok: 'Create',\n            Cancel: function () {\n                this$1.dialog.dialog(\"close\");\n            }\n        }\n    });\n};\n\n\n/**\n * Global Modal open window\n */\nEditor.prototype.openDialog = function openDialog (options) {\n        var this$1 = this;\n\n\n    var formDom = $('<div></div>').attr('id', options.id);\n    $.ajax({\n            url: options.url,\n        })\n        .done(function (html) {\n            formDom.hide().append(html);\n            if (formDom.find('.tabs').length === 1) {\n                $('.tabs', formDom).tabs({\n                    /*activate: function(){\n                        if (typeof(options.onTabChange) === 'function'){\n                            options.onTabChange(formDom);\n                        }\n                    }*/\n                });\n            }\n\n            if (typeof(options.onCreate) === 'function') {\n                options.onCreate(formDom);\n            }\n\n            $('body').append(formDom);\n            this$1.showDialog(options);\n        });\n};\n\n\n\nEditor.prototype.showDialog = function showDialog (options) {\n        var this$1 = this;\n\n    var dialog = $('#' + options.id);\n    var form = $('form', dialog);\n\n    if (form.find('.tabs').length === 1) {\n        $('.tabs ul li a', form).eq(0).click();\n    }\n\n    // options += {\n    //   \"email_type\": \"default\",\n    //   \"email\": \"\",\n    //   \"subject\": \"\",\n    //   \"thanks_msg\": \"\",\n    //   \"submit\": \"fsdfsfd\",\n    //   \"style\": \"s-horizontal\",\n    //   \"fields\": [\n    // {\n    //   \"type\": \"text\",\n    //   \"title\": \"Test\",\n    //   \"isMandatory\": false\n    // }\n    //   ]};\n\n\n    var buttons = {};\n\n    if (typeof(options.buttons.ok) !== 'undefined') {\n        buttons[options.buttons.ok] = function () {\n            this$1.submitForm(dialog, form, options);\n        };\n    }\n    // buttons['Close'] = () => {\n    // dialog.dialog('close');\n    // dialog.remove();\n    // };\n    // \n    if (typeof(options.onShow) === 'function') {\n        options.onShow(form, options.values);\n    }\n\n    dialog.dialog({\n        title: options.title,\n        modal: options.modal,\n        buttons: buttons,\n        width: typeof(options.width) === 'undefined' ? 450 : options.width,\n        minWidth: 300,\n        //minHeight: 600,\n        minHeight: typeof(options.minHeight) === 'undefined' ? 'auto' : options.minHeight,\n        position: {\n            my: \"center top\",\n            at: \"center top+80\",\n            of: window\n        },\n        open: function() {\n\n            //$(this).closest('.ui-dialog').find(\".ui-dialog-buttonset .ui-button:first\").addClass(\"green\");\n\n            if (typeof(options.onAfterShow) === 'function') {\n                options.onAfterShow();\n            }\n\n        },\n        close: function(event, ui) {\n            dialog.remove();\n        }\n    });\n};\n\nEditor.prototype.submitForm = function submitForm (dialog, form, options) {\n        var this$1 = this;\n\n    if (typeof(options.onSubmit) === 'function') {\n        //console.log(options)\n        options.onSubmit(options, form);\n        dialog.dialog('close');\n    } else if (options.type == 'ajax') {\n        var formData = form.serialize();\n        var action = form.attr('action');\n        $.ajax({\n            type: 'POST', // define the type of HTTP verb we want to use (POST for our form)\n            url: action, // the url where we want to POST\n            data: formData, // our data object\n            dataType: 'json', // what type of data do we expect back from the server\n            encode: true,\n            error: function (data) {\n                $(\"input\").parent().removeClass('has-error');\n                $(\"input\").prev().find('span').remove();\n                var errors = data.responseJSON;\n                console.log(errors);\n                $.each(errors, function (key, value) {\n                    $(\"input[name=\" + key + \"]\").parent().addClass('has-error');\n                    $(\"input[name=\" + key + \"]\").prev().append(' <span class=\"has-error\">' + value + '</span>');\n                });\n            }\n        }).done(function (data) {\n            this$1.data = data;\n            dialog.dialog('close');\n            //dialog.remove();\n            if (typeof(options.callback) === 'function') {\n                options.callback();\n            }\n\n        });\n    } else {\n        form.submit();\n    }\n};\n\nEditor.prototype.showMessageDialog = function showMessageDialog (message, title) {\n\n    var messageHtml = message;\n\n    if (typeof(message) === 'object'){\n        messageHtml = $('<ul></ul>').addClass('messages-list');\n        for (var i in message){\n            var itemDom = $('<li></li>').html(message[i]);\n            messageHtml.append(itemDom);\n        }\n    }\n\n    var buttons = {};\n\n    buttons[\"ok\"] = function(){\n        $(this).dialog('close');\n    };\n\n    $('<div class=\"message-text inlinecms\"></div>').append(messageHtml).dialog({\n        title: title,\n        modal: true,\n        resizable: false,\n        width: 350,\n        buttons: buttons\n    });\n\n};\n\nEditor.prototype.showPromptDialog = function showPromptDialog (message, title, onSubmit, defaultValue) {\n\n    var form = $('<div/>').addClass('message-prompt inlinecms');\n    var prompt = $('<div/>').addClass('prompt').html(message);\n    var input = $('<input/>').attr('type', 'text').val(defaultValue);\n\n    var buttons = {};\n\n    buttons['ok'] = function(){\n        onSubmit(input.val());\n        $(this).dialog('close');\n    };\n\n    buttons['cancel'] = function(){\n        $(this).dialog('close');\n    };\n\n    form.append(prompt).append(input).dialog({\n        title: title,\n        modal: true,\n        resizable: false,\n        width: 350,\n        buttons: buttons,\n        open: function(){\n            setTimeout(function(){\n                input.focus();\n            }, 10);\n        }\n    });\n};\n\nEditor.prototype.showConfirmationDialog = function showConfirmationDialog (message, onConfirm, onCancel) {\n\n    var buttons = {};\n\n    buttons[\"yes\"] = function() {\n        if (typeof(onConfirm) === 'function') { onConfirm(); }\n        $(this).dialog('close');\n    };\n\n    buttons[\"no\"] = function() {\n        if (typeof(onCancel) === 'function') { onCancel(); }\n        $(this).dialog('close');\n    };\n\n    $('<div class=\"message-text jodelcms\"></div>').append(message).dialog({\n        title: \"confirmation\",\n        modal: true,\n        resizable: false,\n        width: 350,\n        buttons: buttons,\n        open: function() {\n            $(this).closest('.ui-dialog').find(\".ui-dialog-buttonset .ui-button:first\").addClass(\"green\");\n            $(this).closest('.ui-dialog').find(\".ui-dialog-buttonset .ui-button:last\").addClass(\"red\");\n        }\n    });\n\n};\n\n// getElementOptions(elementId){\n\n// // alert(JSON.stringify(this.editorFrame.get(0).contentWindow.options));\n// console.log(elementId)\n// return '{\"size\": \"60\" }';\n// $.ajax({\n//         type: 'GET', // define the type of HTTP verb we want to use (POST for our form)\n//         url: '/admin/element/'+elementId, // the url where we want to POST\n//         dataType: 'json', // what type of data do we expect back from the server\n//         encode: true,\n//         error: (data) => {\n\n//             }\n//     }).done((data) => {\n//         return '{\"size\": 60 }';\n//     });\n\n// // var widget = this.getWidget(regionId, widgetId);\n// // return widget.options;\n// //return '{\"size\":\"60\"}';\n// //\n// // return {\"email_type\": \"default\",\n// //   \"email\": \"\",\n// //   \"subject\": \"\",\n// //   \"thanks_msg\": \"\",\n// //   \"submit\": \"fsdfsfd\",\n// //   \"style\": \"s-horizontal\",\n// //   \"fields\": [\n// // {\n// //   \"type\": \"text\",\n// //   \"title\": \"Test\",\n// //   \"isMandatory\": false\n// // }\n// //   ]};\n\n// };\n\n/**\n * Registers all Elements\n */\nEditor.prototype.registerElementHandler = function registerElementHandler (id, handler) {\n\n    handler.getTitle = function() {\n        //return cms.lang(\"widgetTitle_\" + this.getName());\n        //return 'TextBlock';\n        return this.getName();\n    };\n\n    this.elementHandlers[id] = handler;\n\n};\n\n\n/**\n * Build the Editor list of Elements\n */\nEditor.prototype.buildElementsList = function buildElementsList () {\n        var this$1 = this;\n\n\n    var elementsList = $('#tab-elements .list ul', this.editorPanel);\n\n    for (var i in this.elementsList) {\n        var elementId = this$1.elementsList[i];\n\n        var title = this$1.elementHandlers[elementId].getTitle();\n        var icon = this$1.elementHandlers[elementId].getIcon();\n\n        var item = $('<li></li>').attr('data-id', elementId).addClass('editor-element');\n        item.html('<i class=\"fa ' + icon + '\"></i>');\n        item.attr('title', title);\n        item.tooltip({\n            track: true,\n            show: false,\n            hide: false\n        });\n        elementsList.append(item);\n    }\n\n    $('li', elementsList).draggable({\n        helper: \"clone\",\n        iframeFix: true\n    });\n};\n\n/**\n * Initialize the editable Elements\n */\nEditor.prototype.initElements = function initElements (region) {\n        var this$1 = this;\n\n    region.find('>div').each(function (i, elm) {\n\n        var elementDom = $(elm);\n\n        var type = elementDom.data('type');\n        var handler = this$1.elementHandlers[type];\n\n        handler.initElement(elementDom, function (elementDom, type) {\n            this$1.buildElementToolbar(elementDom, handler);\n        });\n    });\n};\n\n/**\n * Build elements Toolbar\n */\nEditor.prototype.buildElementToolbar = function buildElementToolbar (elementDom, handler) {\n        var this$1 = this;\n\n\n    if (typeof(handler.toolbarButtons) === 'undefined') {\n\n        var defaultToolbarButtons = {\n            \"options\": {\n                icon: \"fa-wrench\",\n                title: 'Options'\n            },\n            \"move\": {\n                icon: \"fa-arrows\",\n                title: 'Move',\n                click: function (elementDom) {\n                    return false;\n                }\n            },\n            \"delete\": {\n                icon: \"fa-trash\",\n                title: 'Delete',\n                click: function (elementDom) {\n                    this$1.deleteElement(elementDom);\n                }\n            }\n        };\n\n        var buttons = {};\n\n        if (typeof(handler.getToolbarButtons) === 'function') {\n            buttons = handler.getToolbarButtons();\n        }\n\n        handler.toolbarButtons = $.extend(true, {}, defaultToolbarButtons, buttons);\n\n    }\n\n    var toolbar = $('<div />').addClass('inline-toolbar').addClass('jodelcms');\n    var isFixedRegion = elementDom.parents('.jodelcms-region-fixed').length > 0;\n\n    $.map(handler.toolbarButtons, function(button, buttonId) {\n\n        if (button === false) {\n            return button; }\n        if (buttonId == 'move' && isFixedRegion) {\n            return button; }\n        if (buttonId == 'delete' && isFixedRegion) {\n            return button; }\n\n        var buttonDom = $('<div></div>').addClass('button').addClass('b-' + buttonId);\n        buttonDom.attr('title', button.title);\n        buttonDom.html('<i class=\"fa ' + button.icon + '\"></i>');\n\n        toolbar.append(buttonDom);\n\n        if (typeof(button.click) === 'function') {\n            buttonDom.click(function(e) {\n                e.stopPropagation();\n                button.click(elementDom);\n            });\n        }\n\n        return button;\n\n    });\n\n    elementDom.append(toolbar);\n\n};\n\n/**\n * Initialize the editable Regions\n */\nEditor.prototype.initRegions = function initRegions () {\n        var this$1 = this;\n\n    $('.jodelRegion', this.editorFrame.contents()).each(function (i, elm) {\n        var region = $(elm);\n        this$1.initElements(region);\n\n        var dropZone = $('<div></div>').addClass('drop-helper').addClass('jodelcms');\n        dropZone.html('<i class=\"fa fa-plus-circle\"></i>');\n\n        region.append(dropZone);\n\n        $('.drop-helper', region).hide();\n\n        if (region.hasClass('jodelcms-region-fixed')) {\n            return; }\n\n        region.droppable({\n            accept: \".editor-element\",\n            over: function () {\n                $('.drop-helper', region).show();\n            },\n            out: function () {\n                $('.drop-helper', region).hide();\n            },\n            drop: function (event, ui) {\n                $('.drop-helper', region).hide();\n                this$1.addElement(region, ui.draggable.data('id'));\n            }\n        });\n\n        region.sortable({\n            handle: '.b-move',\n            //axis: 'y',\n            connectWith: '.jodelRegion',\n            update: function (event, ui) {\n                this$1.setChanges();\n            }\n        });\n    });\n};\n\n\nEditor.prototype.addElement = function addElement (regionDom, type) {\n        var this$1 = this;\n\n    //alert(type)\n    var regionId = regionDom.data('region-id');\n    var elementOrder = regionDom.find('>div').length - 1;\n    var totalElements = this.editorFrame.contents().find('div.jodelcms-element').length;\n    var dummyID = Number(totalElements)+1;\n\n    var handler = this.elementHandlers[type];\n    var options = handler.defaultOptions;\n\n    $.ajax({\n        type: 'POST', // define the type of HTTP verb we want to use (POST for our form)\n        url: '/admin/element/add', // the url where we want to POST\n        data: { 'id': regionId, 'dummyID': dummyID, 'type': type, 'options': JSON.stringify(options), 'order': elementOrder }, // our data object\n        //dataType: 'json', // what type of data do we expect back from the server\n        encode: true,\n        error: function (data) {}\n    }).done(function (data) {\n        var elementDom = $(data);\n        $('.drop-helper', regionDom).before(elementDom);\n\n        handler.createElement(regionId, elementDom, function (elementDom, type) {\n            this$1.buildElementToolbar(elementDom, handler);\n            return true;\n        });\n        this$1.setChanges();\n    });\n};\n\n/**\n * Delete an Element\n */\nEditor.prototype.deleteElement = function deleteElement (elementDom) {\n        var this$1 = this;\n\n\n    var elementId = elementDom.attr('id');\n    var eid = elementId.replace('element_', '');\n    var type = elementDom.data('type');\n    var handler = this.elementHandlers[type];\n\n    this.showConfirmationDialog('Delete this Element', function () {\n\n        if( ! elementDom.hasClass('dummy')) {\n            this$1.elementsToDelete.push(eid);\n        }\n        if (typeof(handler.deleteElement) === 'function') {\n            handler.deleteElement(elementDom);\n        } else {\n            elementDom.remove();\n        }\n        this$1.setChanges();\n    });\n};\n\n// import $ from 'jquery';\n// import jQuery from 'jquery';\n// // export for others scripts to use\n// window.$ = $;\n// window.jQuery = jQuery;\n\n// import 'bootstrap-sass';\n\nwindow.editor = new Editor();\n\n$(function() {\n    editor.initPanel();\n});\n\n}((this.LaravelElixirBundle = this.LaravelElixirBundle || {})));\n\n//# sourceMappingURL=editor.js.map\n","function Element() {\n\n    this.isOptionsFormLoaded = false;\n\n    this.initElement = function(elementDom, callback) {\n\n        var handler = this;\n\n        //this.loadLang(function(){\n        if (typeof(handler.onInitElement) === 'function') {\n            // handler.onInitWidget(widget, regionId);\n            handler.onInitElement(elementDom);\n        }\n        callback(elementDom);\n        //});\n\n        if (typeof(this.onClick) === 'function') {\n            elementDom.click(function(e) {\n                e.stopPropagation();\n                e.preventDefault();\n                handler.onClick(elementDom);\n            });\n        }\n\n    };\n\n    this.createElement = function(regionId, elementDom, callback) {\n\n        var handler = this;\n\n        //this.loadLang(function(){\n        if (typeof(handler.onCreateElement) === 'function') {\n            element = handler.onCreateElement(elementDom, regionId);\n        }\n        callback(elementDom);\n        //});\n\n        if (typeof(this.onClick) === 'function') {\n            elementDom.click(function(e) {\n                e.stopPropagation();\n                e.preventDefault();\n                handler.onClick(elementDom, regionId);\n            });\n        }\n    };\n\n    this.loadLang = function(callback) {\n        if (typeof(this.lang) === 'function') {\n            callback();\n            return;\n        }\n        this.lang = function() {};\n        var handler = this;\n        cms.loadWidgetLang(this.getName(), function(phrases) {\n            handler.langPhrases = phrases;\n            handler.lang = function(phraseId, replacements) {\n                if (typeof(this.langPhrases[phraseId]) === 'undefined') {\n                    return phraseId;\n                }\n                var phrase = this.langPhrases[phraseId];\n                if (typeof(replacements) !== 'undefined') {\n                    for (var id in replacements) {\n                        phrase = phrase.replace(new RegExp('\\{' + id + '\\}', 'g'), replacements[id]);\n                    }\n                }\n                return phrase;\n            };\n            callback();\n        });\n    };\n\n    this.openOptionsForm = function(elementDom) {\n\n        var handler = this;\n        var eid = elementDom.attr('id');\n        var elementId = parseInt(eid.match(/(\\d+)$/)[0], 10);\n        let options = editor.editorFrame.get(0).contentWindow.options[eid];\n\n        var formSettings = {\n            id: this.getName() + '-options',\n            title: 'Settings: ' + this.getTitle(),\n            modal: true,\n            url: '/admin/element/' + this.getName() + '/' + elementId + '/settings' + '/' + editor.editorLocale,\n            type: 'ajax',\n            values: options,\n            buttons: {\n                ok: 'Apply',\n            },\n            onSubmit: function(options, form) {\n                handler.applyOptions(elementDom, form);\n            }\n        };\n        if (typeof(this.getOptionsFormSettings) !== 'undefined') {\n            formSettings = $.extend(formSettings, this.getOptionsFormSettings(elementDom));\n        }\n        editor.openDialog(formSettings);\n    };\n\n    // this.saveOptions = function(elementDom, options, form) {\n    //     //console.log(elementId)\n    //     //       var widget = cms.getWidget(regionId, widgetId);\n\n    //     //       widget.domId = 'jodelcms-element-' + regionId + widget.id;\n\n    //            //newOptions = $.extend({}, newOptions, this.applyOptions(widget, newOptions, form));\n\n    //     // cms.setWidgetOptions(regionId, widgetId, newOptions);\n\n    // };\n\n    this.getOptions = function(elementId) {\n        return editor.editorFrame.get(0).contentWindow.options[elementId];\n    }\n\n    this.onClick = function(elementDom) {\n        this.openOptionsForm(elementDom);\n    };\n\n    //this.applyOptions = function(elementDom, options, form){};\n\n    // this.dom = function(widget){\n    //     return $('#'+widget.domId+' .jodelcms-content', this.pageFrame);\n    // };\n\n    //   this.runBackend = function(action, params, callback){\n\n    //       if (typeof(params) === 'undefined') {\n    //           params = {};\n    //       }\n\n    //       params._widgetId = this.getName();\n    // params._widgetAction = action;\n\n    //       cms.runModule('widgets', 'run', params, function(result){\n    //           if (typeof(callback) === 'function'){\n    //      callback(result);\n    //  }\n    //       });\n\n    //   };\n\n    \n\n}\n","editor.registerElementHandler('form', new function() {\n\n    Element.apply(this, arguments);\n\n    this.getName = function() {\n        return 'form';\n    };\n\n    this.getIcon = function() {\n        return \"fa-envelope-o\";\n    };\n\n    this.defaultOptions = {\n        \"email_type\": \"default\",\n        \"email\": \"\",\n        \"subject\": \"\",\n        \"response\": \"Thank you!\",\n        \"submit\": \"Submit\",\n        \"fields\": []\n    };\n\n    this.getToolbarButtons = function() {\n        let handler = this;\n        return {\n            options: {\n                icon: \"fa-gear\",\n                click: function(regionId, widgetId) {\n                    handler.openOptionsForm(regionId, widgetId);\n                }\n            }\n        };\n    };\n\n    this.getOptionsFormSettings = function() {\n        return {\n            onCreate: function(form) {\n                $('.fields-list', form).sortable({\n                    handle: '.drag-handle'\n                });\n                $('.f-email-type select', form).on('change', function() {\n                    $('.f-email', form).toggle($(this).val() == 'custom');\n                }).change();\n                form.on('click', '.actions .b-mandatory', function(e) {\n                    e.preventDefault();\n                    $(this).toggleClass('active');\n                });\n                form.on('click', '.actions .b-delete', function(e) {\n                    e.preventDefault();\n                    $(this).parents('.form-field').remove();\n                });\n                $('.f-add button', form).click(function(e) {\n                    e.preventDefault();\n                    var list = $('.fields-list', form);\n                    $('.field-template', form).clone().removeClass('field-template').addClass('form-field').appendTo(list);\n                });\n            },\n            onShow: function(form, options) {\n                $('.f-email-type select', form).change();\n                var list = $('.fields-list', form);\n                $('.form-field', list).remove();\n                if (!options || !options.fields) {\n                    return; }\n                $.each(options.fields, function(index, field) {\n                    var item = $('.field-template', form).clone().removeClass('field-template').addClass('form-field').appendTo(list);\n                    $('.field-title', item).val(field.title);\n                    $('.field-type', item).val(field.type);\n                    if (field.isMandatory) {\n                        $('.b-mandatory', item).addClass('active');\n                    }\n                    list.append(item);\n                });\n\n                //  \"email_type\": \"default\",\n                // \"email\": \"\",\n                $('.subject', form).val(options.subject);\n                $('.submit', form).val(options.submit);\n                $('.response', form).val(options.response);\n            }\n        };\n    };\n\n    this.onCreateElement = function(elementDom) {\n        this.openOptionsForm(elementDom);\n    };\n\n    this.applyOptions = function(elementDom, form) {\n\n        editor.showLoadingIndicator();\n\n        var elementId = elementDom.attr('id');\n        var elementIdDb = elementId.replace('element_', '');\n\n        var options = this.getOptions(elementId);\n        options['fields'] = [];\n\n        $('.fields-list .form-field', form).each(function(index) {\n            var field = $(this);\n            var title = $('input.field-title', field).val();\n            if (!title) { return; }\n            var type = $('select.field-type', field).val();\n            var isMandatory = $('.b-mandatory', field).hasClass('active');\n            options['fields'].push({\n                type: type,\n                title: title,\n                isMandatory: isMandatory\n            });\n        });\n\n        //  \"email_type\": \"default\",\n        // \"email\": \"\",\n        options['subject'] = $('.subject', form).val();\n        options['submit'] = $('.submit', form).val();\n        options['response'] = $('.response', form).val(); \n\n        $.ajax({\n            type: 'POST', // define the type of HTTP verb we want to use (POST for our form)\n            url: '/admin/element/form/' + elementIdDb + '/apply', // the url where we want to POST\n            data: { 'options': JSON.stringify(options) },\n            error: (xhr, ajaxOptions, thrownError) => {\n                console.log(xhr.status);\n                console.log(thrownError);\n            }\n        }).done((data) => {\n            elementDom.find('form').replaceWith(data);\n            editor.hideLoadingIndicator();\n        });\n        return options;\n    };\n\n});\n","editor.registerElementHandler('map', new function() {\n\n    Element.apply(this, arguments);\n\n    //this.isApiLoaded = false;\n    this.isGoogleMapsApiLoadInProgress = false;\n    this.callbacks = [];\n\n    this.mapsObjects = {};\n\n    this.getName = function() {\n        return 'map';\n    };\n\n    this.getIcon = function() {\n        return \"fa-globe\";\n    };\n\n    this.defaultOptions = {\n        width: '100%',\n        height: 200,\n        lat: '48.856614',\n        lng: '2.3522219',\n        zoom: 12,\n        icon: '//maps.google.com/mapfiles/marker.png',\n        styles: '[]'\n    };\n\n    this.getToolbarButtons = function() {\n        let handler = this;\n        return {\n            options: {\n                icon: \"fa-gear\",\n                click: function(regionId, widgetId) {\n                    handler.openOptionsForm(regionId, widgetId);\n                }\n            }\n        };\n    };\n\n    this.getOptionsFormSettings = function() {\n        let handler = this;\n        return {\n            onCreate: function(form) {\n                $('a.find-coords', form).click(function(e) {\n                    e.preventDefault();\n                    editor.showPromptDialog('Enter Address', 'address', function(address) {\n                        handler.loadApi(function(google) {\n                            var geocoder = new google.maps.Geocoder();\n                            geocoder.geocode({ 'address': address }, function(results, status) {\n                                if (status !== google.maps.GeocoderStatus.OK) {\n                                    editor.showMessageDialog('addressError');\n                                    return;\n                                }\n                                var lat = results[0].geometry.location.lat();\n                                var lng = results[0].geometry.location.lng();\n                                $('#lat', form).val(lat);\n                                $('#lng', form).val(lng);\n                            });\n                        });\n                    });\n                });\n                $('a.current-location', form).click(function(e) {\n                    e.preventDefault();\n                    var startPos;\n                    var geoSuccess = function(position) {\n                        startPos = position;\n                        $('#lat', form).val(startPos.coords.latitude);\n                        $('#lng', form).val(startPos.coords.longitude);\n                    };\n                    navigator.geolocation.getCurrentPosition(geoSuccess);\n                });\n            },\n            onShow: function(form, options) {\n                if (!options) { return; }\n\n                $('input[name=width]').val(options.width);\n                $('input[name=height]').val(options.height);\n                $('input[name=lat]').val(options.lat);\n                $('input[name=lng]').val(options.lng);\n                $('input[name=zoom]').val(options.zoom);\n                $('input[name=icon]').val(options.icon);\n                $('textarea[name=styles]').val(options.styles);\n            }\n        };\n    };\n\n    this.onClick = false;\n\n    this.onInitElement = function(elementDom) {\n        let elementId = elementDom.attr('id');\n        let mapId = elementId + '_map';\n\n        let handler = this;\n\n        this.loadApi(function(google) {\n\n            handler.initElementMap(mapId, elementDom, google);\n\n        });\n\n    };\n\n    this.initElementMap = function(mapId, elementDom, google) {\n\n        let elementId = elementDom.attr('id');\n\n        var options = this.getOptions(elementId);\n\n        var center = new google.maps.LatLng(options.lat, options.lng);\n\n        var map = new google.maps.Map(elementDom.find('#' + mapId)[0], {\n            center: center,\n            zoom: Number(options.zoom),\n            styles: JSON.parse(options.styles)\n        });\n\n        map.marker = new google.maps.Marker({\n            map: map,\n            position: center,\n            icon: options.icon,\n            draggable: true\n        });\n\n        google.maps.event.addListener(map, 'zoom_changed', function() {\n            options.zoom = map.getZoom();\n        });\n\n        google.maps.event.addListener(map.marker, 'dragend', function() {\n            var coords = map.marker.getPosition();\n            options.lat = coords.lat();\n            options.lng = coords.lng();\n            map.setCenter(coords);\n        });\n\n        this.mapsObjects[mapId] = map;\n\n    };\n\n\n    this.onCreateElement = function(elementDom) {\n        let elementId = elementDom.attr('id');\n        let mapId = elementId + '_map';\n\n        let handler = this;\n\n        this.loadApi(function(google) {\n\n            handler.initElementMap(mapId, elementDom, google);\n\n        });\n        this.openOptionsForm(elementDom);\n    };\n\n\n    this.applyOptions = function(elementDom, form) {\n\n        var elementId = elementDom.attr('id');\n        var mapObject = this.mapsObjects[elementId + '_map'];\n\n        let width = $('#width', form).val();\n        let height = $('#height', form).val();\n        let zoom = $('#zoom', form).val();\n        let lat = $('#lat', form).val();\n        let lng = $('#lng', form).val();\n        let icon = $('#icon', form).val();\n        let styles = $('#styles', form).val();\n\n        var options = this.getOptions(elementId);\n\n        options['width'] = width;\n        options['zoom'] = zoom;\n        options['lat'] = lat;\n        options['lng'] = lng;\n        \n        if(styles == \"\") {\n            styles = '[]';\n        }\n        options['styles'] = styles;\n        options['icon'] = icon;\n\n        if (height) {\n            options['height'] = height;\n            $('#' + elementId + '_map', elementDom).css('height', Number(height) + 'px');\n        } else {\n            options['height'] = 200;\n            $('#' + elementId + '_map', elementDom).css('height', Number(200) + 'px');\n        }\n\n        if (width) {\n            options['width'] = width;\n            $('#' + elementId + '_map', elementDom).css('width', width);\n        } else {\n            options['width'] = '100%';\n            $('#' + elementId + '_map', elementDom).css('width', '100%');\n        }\n\n        this.loadApi(function(google) {\n            var center = new google.maps.LatLng(lat, lng);\n            google.maps.event.trigger(mapObject, \"resize\");\n            mapObject.setZoom(Number(zoom));\n            mapObject.setCenter(center);\n            mapObject.marker.setPosition(center);\n            mapObject.marker.setIcon(icon);\n            mapObject.setOptions({styles: JSON.parse(styles)});\n        });\n\n    };\n\n    this.loaded = function() {\n\n        editor.isGoogleMapsApiLoaded = true;\n        this.isGoogleMapsApiLoadInProgress = false;\n\n        var google = window.frames[0].google;\n\n        while (this.callbacks.length > 0) {\n            var callback = this.callbacks.pop();\n            callback(google);\n        }\n\n    };\n\n    this.loadApi = function(callback) {\n        //if (editor.isGoogleMapsApiLoaded) {\n        var google = window.frames[0].google;\n        callback(google);\n        return;\n        //}\n\n        this.callbacks.push(callback);\n\n        // if (!this.isGoogleMapsApiLoadInProgress){\n        //     editor.injectScript('http://maps.googleapis.com/maps/api/js?callback=parent.editor.elementHandlers.map.loaded&language=en&key=AIzaSyCRqfUKokTWoFg77sAhHOBew_NLgepcTOM');\n        //     this.isGoogleMapsApiLoadInProgress = true;\n        // }\n\n    };\n\n});\n","editor.registerElementHandler('social', new function() {\n\n    Element.apply(this, arguments);\n\n    this.getName = function() {\n        return 'social';\n    };\n\n    this.getIcon = function() {\n        return \"fa-share-square-o\";\n    };\n\n    this.defaultOptions = {\n        \"showLabel\": false,\n        \"showCount\": false,\n        \"shareIn\": \"popup\",\n        shares: [\"twitter\", \"facebook\", \"googleplus\", \"linkedin\", \"pinterest\", \"stumbleupon\", \"whatsapp\"]\n    };\n\n    this.getToolbarButtons = function() {\n        let handler = this;\n        return {\n            options: {\n                icon: \"fa-gear\",\n                click: function(regionId, widgetId) {\n                    handler.openOptionsForm(regionId, widgetId);\n                }\n            }\n        };\n    };\n\n    this.getOptionsFormSettings = function() {\n        return {\n            onCreate: function(form) {\n                \n            },\n            onShow: function(form, options) {\n                if (!options) { return; }\n                \n                $('input[name=showLabel]').prop('checked', options.showLabel);\n                $('input[name=showCount]').prop('checked', options.showCount);\n                $.each(options.shares, function(index, field) {\n                    $('#'+field, form).prop('checked', true);\n                });\n            }\n        };\n    };\n\n    this.onCreateElement = function(elementDom) {\n        this.openOptionsForm(elementDom);\n    };\n\n    this.applyOptions = function(elementDom, form) {\n\n        editor.showLoadingIndicator();\n\n        var elementId = elementDom.attr('id');\n\n        var options = this.getOptions(elementId);\n\n        options['showLabel'] = $('#showLabel', form).prop('checked');\n        options['showCount'] = $('#showCount', form).prop('checked');\n\n        options['shares'] = [];\n\n        $('.shares', form).each(function(index) {\n            var field = $(this);\n            if(field.prop('checked')) {\n                var name = field.attr('name');\n                options['shares'].push(name);\n            }\n        });\n\n        editor.editorFrame.get(0).contentWindow.reInitJsSocials(elementId+'_social',options);\n\n        editor.hideLoadingIndicator();\n\n    };\n\n});\n","editor.registerElementHandler('spacer', new function() {\n\n    Element.apply(this, arguments);\n\n    this.editor;\n\n\tthis.getName = function() {\n\t\treturn 'spacer';\n\t};\n\n\tthis.getIcon = function() {\n\t\treturn \"fa-arrows-v\";\n\t};\n\n    this.defaultOptions = { 'size': '25' };\n\n    this.getToolbarButtons = function() {\n\t\tlet handler = this;\n        return {\n\t\t\toptions: {\n                icon: \"fa-gear\",\n                click: function(elementDom){\n\t\t\t\t\thandler.openOptionsForm(elementDom);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n    this.getOptionsFormSettings = function() {\n        return {\n            onShow: function(form, options){\n                if (!options || !options.size) { return; }\n                $('#size', form).val(options.size);\n            }\n        };\n    };\n\n\tthis.onCreateElement = function(elementDom) {\n        this.openOptionsForm(elementDom);\n\t};\n\n    this.applyOptions = function(elementDom, form) {\n        let size = $('#size',form).val();\n        let elementId = elementDom.attr('id');\n\n        options = this.getOptions(elementId);\n        options['size'] = size;\n\n        $('div.jodelcms-content div', elementDom).css('height', Number(size)+'px');\n    };\n\n});","editor.registerElementHandler('text', new function() {\n\n    Element.apply(this, arguments);\n\n    this.editor;\n    this.editors = {};\n\n    this.getName = function() {\n        return 'text';\n    };\n\n    this.getIcon = function() {\n        return \"fa-font\";\n    };\n\n    this.defaultOptions = {};\n\n    this.getToolbarButtons = function() {\n        return {\n            options: false\n        };\n    };\n\n    this.onClick = false;\n\n    this.onInitElement = function(elementDom) {\n        let elementId = elementDom.attr('id');\n        editor.editorFrame.get(0).contentWindow.initTinyMCE('#' + elementId + '_content');\n    };\n\n    this.onCreateElement = function(elementDom) {\n        elementDom.attr('data-type', 'text');\n        let elementId = elementDom.attr('id');\n        let getTiny = editor.editorFrame.get(0).contentWindow;\n        getTiny.initTinyMCE('#' + elementId + '_content');\n        setTimeout(function() {\n            getTiny.tinyMCE.EditorManager.get(elementId + '_content').focus();\n        }, 500)\n    };\n\n    this.deleteElement = function(elementDom) {\n        let elementId = elementDom.attr('id');  \n        editor.editorFrame.get(0).contentWindow.tinymce.remove('#' + elementId + '_content');\n        elementDom.remove();\n    };\n\n});\n"]}